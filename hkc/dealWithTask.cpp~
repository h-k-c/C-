#include "devil.hpp"
using namespace _home;
void Devil::dealWithTask(vector<tNode*> Tasktree,Robot robot,Sort sort[]){
    //通过循环来遍历容器中的节点，然后当便利到一个节点的时候就执行节点里面里面的动作。
    vector<tNode*>::iterator it;//用来遍历容器中的节点；
    multimap<int,multimap<int,string> >::iterator is;//用来遍历结构体中的multimap；
    multimap<int,string>::iterator isc;//用来遍历map中的second；
   
    for(it=Tasktree.begin();it!=Tasktree.end();it++){
        if((*it)->sortNum==0){
            //当符合节点合并后，就会把节点中的sortNum赋值为0，从未就不访问这个节点；
            continue;
        }
 //首先把机器人手中的物体放下，在不违反约束的情况下；
        if(robot.getHold()!=0){
            PutDown(robot.getHold());
            robot.setHold(0);
            sort[robot.getHold()-1].setsLoc(robot.getLoc());
       }
        while((*it)!=NULL){
            for(is=(*it)->taskmultimap.begin();is!=(*it)->taskmultimap.end();is++){
                for(isc=is->second.begin();isc!=is->second.end();isc++){
                    //首先让机器人走到指定节点的位置，也就是节点的is->first;
                    //首先判断机器人是否在那个位置，如果不在就走过去；
                    if(robot.getLoc()!=is->first){
                        Move(is->first);
                        robot.setLoc(is->first);
                    }
                    //然后再判断初始化的时候把机器人手上的东西放下，在符合约束条件情况下；
                    //然后判断动作进行执行
                    if(isc->second=="pickup"){
                        //执行pickup的动作，pickup里面的是isc->first；
                        if(robot.getHold()!=0){
                            //把物体放到盘子上
                            ToPlate(robot.getHold()); 
                            robot.setPlate(robot.getHold());
                            robot.setHold(0);
                            //更新状态
                        }
                        robot.setHold(isc->first);
                    }
                    if(isc->second=="putdown"){
                        //执行putdown的动作，putdown的物体是isc->first;,如果东西在盘子里那就取盘子里的东西
                        //更新物体的位置
                        if(robot.getPlate()!=0&&robot.getHold()!=0){
                            PutDown(robot.getHold());
                            sort[robot.getHold()-1].setsLoc(is->first);
                            FromPlate(robot.getPlate());
                            robot.setHold(robot.getPlate());
                            robot.setPlate(0);
                            PutDown(robot.getPlate());
                            sort[robot.getHold()-1].setsLoc(is->first);
                        }
                        PutDown(isc->first);
                        sort[isc->first-1].setsLoc(is->first);
                    }
                    if(isc->second=="putin"){
                        //执行putin动作，putin的物体是isc-first;
                        //更新物体的位置
                        if(sort[is->first-1].getsClosed()==true){
                            Open(is->first);
                            sort[is->first-1].setsClosed("opened");
                        }
                        PutIn(isc->first,is->first);
                        sort[isc->first-1].setsLoc(is->first);
                        sort[isc->first-1].setsInside(is->first);
                    }
                    if(isc->second=="takeout"){
                        //执行takeout动作，takeout的物体是isc->first;
                        //更新物体的状态
                        if(sort[is->first-1].getsClosed()==true){
                            Open(is->first);
                            sort[is->first-1].setsClosed("false");
                        }
                        TakeOut(isc->first,is->first);
                        robot.setHold(isc->first);
                    }
                    if(isc->second=="goto"){
                        //执行goto的动作，goto的目的是isc->first;
                        //更新机器人的位置
                        if(robot.getLoc()==isc->first){
                            cout<<"I am already here"<<endl;
                        }
                        Move(isc->first);
                        robot.setLoc(isc->first);
                    }
                    if(isc->second=="open"){
                        //执行open的动作，open的物体是isc->first;
                        //open动作是最先执行的
                        //更新状态
                    }
                    if(isc->second=="close"){
                        //执行close的动作是最后
                        //更新状态
                    }
                }
            }
            *it=(*it)->next;
        }
    }
}
